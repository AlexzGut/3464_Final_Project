package application;

import com.lcit.model.*;
import com.lcit.dao.*;

import javafx.stage.Stage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Label;
import javafx.scene.control.TableView;
import javafx.scene.control.TableColumn;

import java.sql.Date;
import java.util.ArrayList;
//import java.time.LocalDate;

public class PatientRecordsController {

	@FXML
	private Button btnInsert;
	
	@FXML
	private Label lblOutputMsg;
	
	@FXML
    private TableView<Patient> tvRecords;
	
	@FXML
    private TableColumn<Patient, Integer> tcId;
	
    @FXML
    private TableColumn<Patient, String> tcFirstName;

    @FXML
    private TableColumn<Patient, String> tcLastName;
    
    @FXML
    private TableColumn<Patient, Date> tcDateOfBirth;
	
    @FXML
    private TableColumn<Patient, String> tcAddress;

    @FXML
    private TableColumn<Patient, String> tcContactNumber;
    
    @FXML
    private TableColumn<Patient, String> tcEmail;

    @FXML
    private TableColumn<Patient, String> tcDetails;	
    
    @FXML
    private TableColumn<Patient, Button> tcActions;	
    
    @FXML
    private TableColumn<Patient, Button> tcEdit;	
    
    @FXML
    private TableColumn<Patient, Button> tcDelete;	
	

	public void initialize() {
		
		DAO patients = new DAO();
	    ArrayList<Patient> patientRecords = patients.selectRecords();
	    
		for (Patient patient : patientRecords) {
			addButtons(patient);
		}
		
		ObservableList<Patient> data = FXCollections.observableArrayList(patientRecords);
		
		tcId.setCellValueFactory(new PropertyValueFactory<Patient, Integer>("id"));
		tcFirstName.setCellValueFactory(new PropertyValueFactory<Patient, String>("firstName"));
		tcLastName.setCellValueFactory(new PropertyValueFactory<Patient, String>("lastName"));
		tcDateOfBirth.setCellValueFactory(new PropertyValueFactory<Patient, Date>("dateOfBirth"));
		tcAddress.setCellValueFactory(new PropertyValueFactory<Patient, String>("address"));
		tcContactNumber.setCellValueFactory(new PropertyValueFactory<Patient, String>("contactNumber"));
		tcEmail.setCellValueFactory(new PropertyValueFactory<Patient, String>("email"));
		tcDetails.setCellValueFactory(new PropertyValueFactory<Patient, String>("details"));
		tcEdit.setCellValueFactory(new PropertyValueFactory<Patient, Button>("btnEdit"));
		tcDelete.setCellValueFactory(new PropertyValueFactory<Patient, Button>("btnDelete"));
		
		tvRecords.setItems(data);
	}	
	
	public void addButtons(Patient patient){
	    
		Button btnDelete = new Button("Delete");
		Button btnEdit = new Button("Delete");
		btnDelete.setOnAction(e -> btnDeleteListener(patient));
		btnEdit.setOnAction(e -> btnDeleteListener(patient));
		patient.setBtnDelete(btnDelete);
		patient.setBtnEdit(btnEdit);
	}
	
	private Parent parent;
	public void btnInsertListener() {
		try {
			
			FXMLLoader loader = new FXMLLoader(
					getClass().getResource("EditAddRecord.fxml"));
			
			EditAddController editAddController = loader.getController();
			
			Scene scene = new Scene(parent);
			
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			
			Stage SecondaryStage = new Stage();
			
			SecondaryStage.setTitle("Add Record");
			SecondaryStage.setScene(scene);
			SecondaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void btnDeleteListener(Patient patient) {
		DAO patients = new DAO();
		
		patients.deletRecord(patient);	

		tvRecords.getItems().remove(patient);
	}
	
	
	private void warningBox(String msg) {
		Alert alert = new Alert(AlertType.WARNING);
		alert.setTitle("Warning");
		alert.setContentText(msg);
		alert.showAndWait();
	}
	
	public void showRecords(Patient patient) {		
		ObservableList<Patient> patientRecords = tvRecords.getItems();
		patientRecords.add(patient);
		tvRecords.setItems(patientRecords);
	}
}
